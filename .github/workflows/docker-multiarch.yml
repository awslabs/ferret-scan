name: Multi-Architecture Docker Build

on:
  push:
    branches:
      - main
      - master
    tags:
      - "v*"
  pull_request:
    branches:
      - main
      - master
  workflow_dispatch:
    inputs:
      platforms:
        description: "Target platforms (comma-separated)"
        required: false
        default: "linux/amd64,linux/arm64"
        type: string
      push_image:
        description: "Push image to registry"
        required: false
        default: true
        type: boolean

permissions:
  contents: read
  packages: write
  security-events: write
  id-token: write # Required for AWS OIDC

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}
  ECR_REGISTRY: public.ecr.aws/g4m5x5s3
  ECR_REPOSITORY: awslabs/ferret-scan

jobs:
  docker:
    runs-on: ubuntu-latest
    permissions:
      contents: write # Needed for SBOM action to attach to releases
      packages: write
      id-token: write
      security-events: write

    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Set up QEMU
        uses: docker/setup-qemu-action@v3
        with:
          platforms: all

      - name: Configure AWS credentials
        if: github.event_name != 'pull_request'
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: ${{ secrets.AWS_ROLE_ARN }}
          aws-region: us-east-1
          role-session-name: GitHubActions-ECR-Push

      - name: Log in to GitHub Container Registry
        if: github.event_name != 'pull_request'
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Log in to Amazon ECR Public
        if: github.event_name != 'pull_request'
        uses: aws-actions/amazon-ecr-login@v2
        with:
          registry-type: public

      - name: Extract metadata for GitHub Registry
        id: meta-github
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
          tags: |
            type=ref,event=branch
            type=ref,event=pr
            type=semver,pattern={{version}}
            type=semver,pattern={{major}}.{{minor}}
            type=semver,pattern={{major}}
            type=raw,value=latest,enable={{is_default_branch}}
            type=sha,prefix=sha-,format=short
          labels: |
            org.opencontainers.image.title=Ferret Scan
            org.opencontainers.image.description=Multi-architecture sensitive data detection tool
            org.opencontainers.image.vendor=${{ github.repository_owner }}

      - name: Extract metadata for ECR
        id: meta-ecr
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.ECR_REGISTRY }}/${{ env.ECR_REPOSITORY }}
          tags: |
            type=ref,event=branch
            type=ref,event=pr
            type=semver,pattern={{version}}
            type=semver,pattern={{major}}.{{minor}}
            type=semver,pattern={{major}}
            type=raw,value=latest,enable={{is_default_branch}}
            type=sha,prefix=sha-,format=short
          labels: |
            org.opencontainers.image.title=Ferret Scan
            org.opencontainers.image.description=Multi-architecture sensitive data detection tool
            org.opencontainers.image.vendor=${{ github.repository_owner }}

      - name: Determine platforms
        id: platforms
        run: |
          if [ "${{ github.event_name }}" = "workflow_dispatch" ]; then
            echo "platforms=${{ github.event.inputs.platforms }}" >> $GITHUB_OUTPUT
          elif [ "${{ github.event_name }}" = "pull_request" ]; then
            # Only build for amd64 on PRs for faster feedback
            echo "platforms=linux/amd64" >> $GITHUB_OUTPUT
          else
            # Full multi-arch build for main branch and tags
            echo "platforms=linux/amd64,linux/arm64" >> $GITHUB_OUTPUT
          fi

      - name: Build and push Docker image
        uses: docker/build-push-action@v5
        with:
          context: .
          file: ./Dockerfile
          platforms: ${{ steps.platforms.outputs.platforms }}
          push: ${{ github.event_name != 'pull_request' && (github.event.inputs.push_image != 'false') }}
          tags: |
            ${{ steps.meta-github.outputs.tags }}
            ${{ steps.meta-ecr.outputs.tags }}
          labels: ${{ steps.meta-github.outputs.labels }}
          build-args: |
            VERSION=${{ steps.meta-github.outputs.version }}
            GIT_COMMIT=${{ github.sha }}
            BUILD_DATE=${{ fromJSON(steps.meta-github.outputs.json).labels['org.opencontainers.image.created'] }}
          cache-from: type=gha
          cache-to: type=gha,mode=max
          provenance: false
          sbom: false

      - name: Generate SBOM
        if: github.event_name != 'pull_request'
        uses: anchore/sbom-action@v0
        with:
          image: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${{ steps.meta-github.outputs.version }}
          format: spdx-json
          output-file: sbom.spdx.json
        continue-on-error: true # Don't fail workflow if SBOM generation fails

      - name: Upload SBOM
        if: github.event_name != 'pull_request'
        uses: actions/upload-artifact@v4
        with:
          name: sbom
          path: sbom.spdx.json
          retention-days: 30

      - name: Run Trivy vulnerability scanner
        if: github.event_name != 'pull_request'
        uses: aquasecurity/trivy-action@master
        with:
          image-ref: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${{ steps.meta-github.outputs.version }}
          format: "sarif"
          output: "trivy-results.sarif"

      - name: Upload Trivy scan results to GitHub Security tab
        if: github.event_name != 'pull_request'
        uses: github/codeql-action/upload-sarif@v3
        with:
          sarif_file: "trivy-results.sarif"
          category: "trivy-container-scan"
        continue-on-error: true # Don't fail the workflow if SARIF upload fails

      - name: Test multi-arch images
        if: github.event_name != 'pull_request'
        run: |
          echo "🧪 Testing built images..."

          # Test each platform for both registries
          for platform in $(echo "${{ steps.platforms.outputs.platforms }}" | tr ',' ' '); do
            echo "Testing $platform..."
            
            # Test GitHub Registry image
            echo "Testing GitHub Registry image..."
            docker run --rm --platform=$platform \
              ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${{ steps.meta-github.outputs.version }} \
              --version || echo "⚠️ GitHub Registry version check failed for $platform"
              
            # Test ECR image
            echo "Testing ECR image..."
            docker run --rm --platform=$platform \
              ${{ env.ECR_REGISTRY }}/${{ env.ECR_REPOSITORY }}:${{ steps.meta-ecr.outputs.version }} \
              --version || echo "⚠️ ECR version check failed for $platform"
          done

      - name: Create release summary
        if: github.event_name != 'pull_request'
        run: |
          echo "## 🐳 Multi-Architecture Docker Build Summary" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### GitHub Container Registry" >> $GITHUB_STEP_SUMMARY
          echo "**Image:** \`${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}\`" >> $GITHUB_STEP_SUMMARY
          echo "**Tags:** ${{ steps.meta-github.outputs.tags }}" | tr ',' '\n' | sed 's/^/- `/' | sed 's/$/`/' >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### Amazon ECR Public" >> $GITHUB_STEP_SUMMARY
          echo "**Image:** \`${{ env.ECR_REGISTRY }}/${{ env.ECR_REPOSITORY }}\`" >> $GITHUB_STEP_SUMMARY
          echo "**Tags:** ${{ steps.meta-ecr.outputs.tags }}" | tr ',' '\n' | sed 's/^/- `/' | sed 's/$/`/' >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "**Platforms:** ${{ steps.platforms.outputs.platforms }}" | tr ',' '\n' | sed 's/^/- /' >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### Usage Examples:" >> $GITHUB_STEP_SUMMARY
          echo '```bash' >> $GITHUB_STEP_SUMMARY
          echo "# Pull from GitHub Container Registry" >> $GITHUB_STEP_SUMMARY
          echo "docker pull ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:latest" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "# Pull from Amazon ECR Public" >> $GITHUB_STEP_SUMMARY
          echo "docker pull ${{ env.ECR_REGISTRY }}/${{ env.ECR_REPOSITORY }}:latest" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "# Run CLI mode" >> $GITHUB_STEP_SUMMARY
          echo "docker run --rm -v \$(pwd):/data ${{ env.ECR_REGISTRY }}/${{ env.ECR_REPOSITORY }}:latest --file /data/sample.txt" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "# Run web mode" >> $GITHUB_STEP_SUMMARY
          echo "docker run --rm -p 8080:8080 ${{ env.ECR_REGISTRY }}/${{ env.ECR_REPOSITORY }}:latest --web --port 8080" >> $GITHUB_STEP_SUMMARY
          echo '```' >> $GITHUB_STEP_SUMMARY

  security-scan:
    runs-on: ubuntu-latest
    needs: docker
    if: github.event_name != 'pull_request'
    permissions:
      contents: read
      packages: read
      security-events: write

    steps:
      - name: Run Grype vulnerability scanner on GitHub Registry
        uses: anchore/scan-action@v3
        id: scan-github
        with:
          image: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:latest
          fail-build: false
          severity-cutoff: high

      - name: Upload Grype scan results
        uses: github/codeql-action/upload-sarif@v3
        with:
          sarif_file: ${{ steps.scan-github.outputs.sarif }}
          category: "grype-container-scan"
        continue-on-error: true # Don't fail the workflow if SARIF upload fails
